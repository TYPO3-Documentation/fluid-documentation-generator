<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            targetNamespace="http://typo3.org/ns/FluidTYPO3/Vhs/ViewHelpers">
    <xsd:element name="format.dateRange">
        <xsd:annotation>
            <xsd:documentation><![CDATA[### Date range calculation/formatting ViewHelper

Uses DateTime and DateInterval operations to calculate a range
between two DateTimes.

#### Usages

- As formatter, the ViewHelper can output a string value such as
  "2013-04-30 - 2013-05-30" where you can configure both the start
  and end date (or their common) formats as well as the "glue"
  which binds the two dates together.
- As interval calculator, the ViewHelper can be used with a special
  "intervalFormat" which is a string used in the constructor method
  for the DateInterval class - for example, "P3M" to add three months.
  Used this way, you can specify the start date (or rely on the
  default "now" DateTime) and specify the "intervalFormat" to add
  your desired duration to your starting date and use that as end
  date. Without the "return" attribute, this mode simply outputs
  the formatted dates with interval deciding the end date.
- When used with the "return" attribute you can specify which type
  of data to return:
  - if "return" is "DateTime", a single DateTime instance is returned
    (which is the end date). Use this with a start date to return the
    DateTime corresponding to "intervalFormat" into the future/past.
  - if "return" is a string such as "w", "d", "h" etc. the corresponding
    counter value (weeks, days, hours etc.) is returned.
  - if "return" is an array of counter IDs, for example ["w", "d"],
    the corresponding counters from the range are returned as an array.

#### Note about LLL support and array consumers

When used with the "return" attribute and when this attribute is an
array, the output becomes suitable for consumption by f:translate, v:l
or f:format.sprintf for example - as the "arguments" attribute:

    <f:translate key="myDateDisplay"
        arguments="{v:format.dateRange(intervalFormat: 'P3W', return: {0: 'w', 1: 'd'})}"
    />

Which if "myDateDisplay" is a string such as "Deadline: %d week(s) and
%d day(s)" would output a result such as "Deadline: 4 week(s) and 2 day(s)".

> Tip: the values returned by this ViewHelper in both array and single
> value return modes, are also nicely consumable by the "math" suite
> of ViewHelpers, for example `v:math.division` would be able to divide
> number of days by two, three etc. to further divide the date range.
/]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType mixed="true">
            <xsd:sequence>
                <xsd:any minOccurs="0" maxOccurs="1"/>
            </xsd:sequence>
            <xsd:attribute type="xsd:anySimpleType" name="start" default="'now'">
                <xsd:annotation>
                    <xsd:documentation>
                        <![CDATA[Start date which can be a DateTime object or a string consumable by DateTime constructor]]></xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute type="xsd:anySimpleType" name="end" default="NULL">
                <xsd:annotation>
                    <xsd:documentation>
                        <![CDATA[End date which can be a DateTime object or a string consumable by DateTime constructor]]></xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute type="xsd:string" name="intervalFormat" default="NULL">
                <xsd:annotation>
                    <xsd:documentation><![CDATA[Interval format consumable by DateInterval]]></xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute type="xsd:string" name="format" default="'Y-m-d'">
                <xsd:annotation>
                    <xsd:documentation><![CDATA[Date format to apply to both start and end date]]></xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute type="xsd:string" name="startFormat" default="NULL">
                <xsd:annotation>
                    <xsd:documentation><![CDATA[Date format to apply to start date]]></xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute type="xsd:string" name="endFormat" default="NULL">
                <xsd:annotation>
                    <xsd:documentation><![CDATA[Date format to apply to end date]]></xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute type="xsd:string" name="glue" default="'-'">
                <xsd:annotation>
                    <xsd:documentation><![CDATA[Glue string to concatenate dates with]]></xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute type="xsd:boolean" name="spaceGlue" default="true">
                <xsd:annotation>
                    <xsd:documentation><![CDATA[If TRUE glue string is surrounded with whitespace]]></xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute type="xsd:anySimpleType" name="return" default="NULL">
                <xsd:annotation>
                    <xsd:documentation>
                        <![CDATA[Return type; can be exactly "DateTime" to return a DateTime instance, a string like "w" or "d" to return weeks, days between the two dates - or an array of w, d, etc. strings to return the corresponding range count values as an array.]]></xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="iterator.column">
        <xsd:annotation>
            <xsd:documentation><![CDATA[### Iterator Column Extraction ViewHelper

Implementation of `array_column` for Fluid.

Accepts an input iterator/array and creates a new array
using values from one column and optionally keys from another
column.

#### Usage examples

```xml
<!-- Given input array of user data arrays with "name" and "uid" column: -->
<f:for each="{users -> v:iterator.column(columnKey: 'name', indexKey: 'uid')}" as="username" key="uid">
    User {username} has UID {uid}.
</f:for>
```

The above demonstrates the logic of the ViewHelper, but the
example itself of course gives the same result as just iterating
the `users` variable itself and outputting `{user.username}` etc.,
but the real power of the ViewHelper comes when using it to feed
other ViewHelpers with data sets:

```xml
<!--
Given same input array as above. Idea being that *any* iterator
can be supported as input for "options".
-->
Select user: <f:form.select options="{users -> v:iterator.column(columnKey: 'name', indexKey: 'uid')}" />
```

```xml
<!-- Given same input array as above. Idea being to output all user UIDs as CSV -->
All UIDs: {users -> v:iterator.column(columnKey: 'uid') -> v:iterator.implode()}
```

```xml
<!-- Given same input array as above. Idea being to output all unique users' countries as a list: -->
Our users live in the following countries:
{users -> v:iterator.column(columnKey: 'countryName')
    -> v:iterator.unique()
    -> v:iterator.implode(glue: ' - ')}
```

Note that the ViewHelper also supports the "as" argument which
allows you to not return the new array but instead assign it
as a new template variable - like any other "as"-capable ViewHelper.

#### Caveat

This ViewHelper passes the subject directly to `array_column` and
as such it *does not support dotted paths in either key argument
to extract sub-properties*. That means it *does not support Extbase
enties as input unless you explicitly implemented `ArrayAccess` on
the model of the entity and even then support is limited to first
level properties' values without dots in their names*.
/]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType mixed="true">
            <xsd:sequence>
                <xsd:any minOccurs="0" maxOccurs="1"/>
            </xsd:sequence>
            <xsd:attribute type="xsd:anySimpleType" name="subject" default="NULL">
                <xsd:annotation>
                    <xsd:documentation><![CDATA[Input to work on - Array/Traversable/...]]></xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute type="xsd:string" name="columnKey" default="NULL">
                <xsd:annotation>
                    <xsd:documentation>
                        <![CDATA[Name of the column whose values will become the value of the new array]]></xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute type="xsd:string" name="indexKey" default="NULL">
                <xsd:annotation>
                    <xsd:documentation>
                        <![CDATA[Name of the column whose values will become the index of the new array]]></xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute type="xsd:string" name="as" default="NULL">
                <xsd:annotation>
                    <xsd:documentation>
                        <![CDATA[Template variable name to assign; if not specified the ViewHelper returns the variable instead.]]></xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
        </xsd:complexType>
    </xsd:element>
</xsd:schema>
